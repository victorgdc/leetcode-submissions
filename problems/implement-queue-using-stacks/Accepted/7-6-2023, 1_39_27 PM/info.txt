{"id":987935139,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1688661567,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/987935139/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"6.9 MB","code":"class MyQueue {\nprivate:\n    stack<int> s1;\n    stack<int> s2;   \npublic:\n    void push(int x) {\n        s2.push(x);\n    }\n    \n    int pop() {\n        while (!s2.empty()) {\n            s1.push(s2.top());\n            s2.pop();\n        }\n        int x = s1.top();\n        s1.pop();\n        while (!s1.empty()) {\n            s2.push(s1.top());\n            s1.pop();\n        }\n        return x;\n    }\n    \n    int peek() {\n        while (!s2.empty()) {\n            s1.push(s2.top());\n            s2.pop();\n        }\n        int x = s1.top();\n        while (!s1.empty()) {\n            s2.push(s1.top());\n            s1.pop();\n        }\n        return x;\n    }\n    \n    bool empty() {\n        return s2.empty();\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"1111111111111111111111","title_slug":"implement-queue-using-stacks","has_notes":false,"flag_type":1}