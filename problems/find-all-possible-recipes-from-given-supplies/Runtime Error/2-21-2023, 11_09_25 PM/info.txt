{"id":902626802,"lang":"cpp","lang_name":"C++","time":"6 months, 3 weeks","timestamp":1677031765,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/902626802/","is_pending":"Not Pending","title":"Find All Possible Recipes from Given Supplies","memory":"N/A","code":"class Solution {\npublic:\n    bool checkRecipe(string recipe, vector<vector<string>> ingr, unordered_map<string, bool> & stock, unordered_map<string, int>& menu) {\n        \n        bool valid;\n        int index = menu[recipe];\n\n        for (int i = 0; i < ingr[index].size(); i++) {\n            valid = true;\n            if (menu.find(ingr[index][i]) == menu.end()) {\n                if (stock[ingr[index][i]] != true) {\n                    valid = false;\n                    break;\n                }\n            }\n            else { // The ingredient is a recipe\n                if (stock.find(ingr[index][i]) == stock.end()) { // If the recipe wasnt made yet\n                    stock[ingr[index][i]] = checkRecipe(ingr[index][i], ingr, stock, menu); \n                    if (!stock[ingr[index][i]]) {\n                        valid = false;\n                        break;\n                    }\n                }\n                else {\n                    if (stock[ingr[index][i]] != true) {\n                        valid = false;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return valid;\n    }\n\n    vector<string> findAllRecipes(vector<string>& recipes, vector<vector<string>>& ingredients, vector<string>& supplies) {\n        unordered_map<string, bool> stock;\n        unordered_map<string, int> menu;\n        int nrec = recipes.size();\n        int nsupp = supplies.size();\n        vector<string> valids;\n\n        for (int i = 0; i < nsupp; i++) {\n            stock[supplies[i]] = true;\n        }\n\n        for (int i = 0; i < nrec; i++) {\n            menu[recipes[i]] = i;\n        }\n\n        for (int i = 0; i < nrec; i++) {\n            stock[recipes[i]] = checkRecipe(recipes[i], ingredients, stock, menu);\n        }\n\n        for (int i = 0; i < nrec; i++) {\n            if (stock[recipes[i]]) valids.push_back(recipes[i]);\n        }\n\n        return valids;\n    }\n};","compare_result":"1111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-all-possible-recipes-from-given-supplies","has_notes":false,"flag_type":1}