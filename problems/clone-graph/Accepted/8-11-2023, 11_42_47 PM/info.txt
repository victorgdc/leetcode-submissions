{"id":1018887342,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1691808167,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1018887342/","is_pending":"Not Pending","title":"Clone Graph","memory":"8.7 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n        if (node == NULL) return node;\n        \n        unordered_map<Node*, Node*> map;\n        queue<Node*> q;\n        Node* head = new Node(node->val, {});\n\n        q.push(node);\n        map[node] = head;\n\n        while(!q.empty()) {\n            Node* cur = q.front(); q.pop();\n        \n            for (int i = 0; i < cur->neighbors.size(); i++) {\n                \n                if (map.find(cur->neighbors[i]) == map.end()) {\n                    map[cur->neighbors[i]] = new Node(cur->neighbors[i]->val, {});\n                    q.push(cur->neighbors[i]);\n                }\n                map[cur]->neighbors.push_back(map[cur->neighbors[i]]);\n            }\n        }\n\n\n        return map[node];\n    }\n};","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}