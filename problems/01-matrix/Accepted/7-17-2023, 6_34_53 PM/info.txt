{"id":997060832,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1689629693,"status":10,"status_display":"Accepted","runtime":"94 ms","url":"/submissions/detail/997060832/","is_pending":"Not Pending","title":"01 Matrix","memory":"30 MB","code":"class Solution {\npublic:\n    vector<int> DIR = {0, 1, 0, -1, 0};\n    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {\n        int m = mat.size();\n        int n = mat[0].size();\n        queue<pair<int, int>> q;\n\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (mat[i][j] == 0) q.emplace(i, j);\n                else mat[i][j] = -1;\n            }\n        }\n\n        while(!q.empty()) {\n            auto [row, col] = q.front(); q.pop();\n\n            for (int i = 0; i < 4; i++) {\n                int node_row = row + DIR[i];\n                int node_col = col + DIR[i+1];\n                if (node_row < 0 || node_row == m ||\n                node_col < 0 || node_col == n || mat[node_row][node_col] != -1)\n                    continue;\n                mat[node_row][node_col] = mat[row][col] + 1;\n                q.emplace(node_row, node_col);\n            }\n        }\n\n        return mat;\n    }\n\n\n};","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"01-matrix","has_notes":false,"flag_type":1}