{"id":999705554,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1689888524,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/999705554/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        \n        if (root == NULL) return {};\n\n        queue<TreeNode*> q;\n        vector<vector<int>> ans;\n        unordered_map<int, int> level;\n        vector<int> partial;\n\n        int last_level = 0;\n        q.push(root);\n        level[root->val] = 0;\n\n        while(!q.empty()) {\n            TreeNode* tmp = q.front(); q.pop();\n            cout << tmp->val << ' ' << level[tmp->val] << ' ' << last_level <<endl;\n\n            if (level[tmp->val] > last_level) {\n                ans.push_back(partial);\n                partial.clear();\n                last_level++;\n            }\n            partial.push_back(tmp->val);\n\n            if (tmp->left != NULL) {\n                q.push(tmp->left);\n                level[tmp->left->val] = level[tmp->val] + 1;\n            }\n            if (tmp->right != NULL) {\n                q.push(tmp->right);\n                level[tmp->right->val] = level[tmp->val] + 1;\n            }\n        }\n        if (partial.size() > 0) ans.push_back(partial);\n\n        return ans;\n    }\n};","compare_result":"11111111111111111111100100011100011","title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}