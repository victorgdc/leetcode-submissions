{"id":904976733,"lang":"cpp","lang_name":"C++","time":"6 months, 2 weeks","timestamp":1677374240,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/904976733/","is_pending":"Not Pending","title":"Detect Squares","memory":"N/A","code":"class DetectSquares {\npublic:\n    unordered_map<vector<int>, int> hash;\n\n    // DetectSquares() {\n    //     hash.clear();\n    // }\n    \n    void add(vector<int> point) {\n        if (hash.find(point) == hash.end()) hash[point] = 0;\n        hash[point]++;    \n    }\n    \n    int count(vector<int> point) {\n        for (auto p: hash) {\n            if (abs(p.first[0] - point[0]) != abs(p.first[1] - point[1]) || p.first[0] == point[0] || p.first[1] == point[1]) continue; \n            if (hash.find({p.first[0], point[1]}) == hash.end() || hash.find([p.first[1], point[0]]) == hash.end()) continue;\n\n            return hash[p.first] * hash[[p.first[0], point[1]] * hash[[p.first[1], point[0]];\n        }\n    }\n};\n\n/**\n * Your DetectSquares object will be instantiated and called as such:\n * DetectSquares* obj = new DetectSquares();\n * obj->add(point);\n * int param_2 = obj->count(point);\n */","compare_result":null,"title_slug":"detect-squares","has_notes":false,"flag_type":1}