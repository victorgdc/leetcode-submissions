{"id":1025096880,"lang":"cpp","lang_name":"C++","time":"3 weeks, 3 days","timestamp":1692382227,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/1025096880/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"43.5 MB","code":"class Trie {\npublic:\n\n    struct Node {\n        struct Node* child[26];\n        bool isend = false;\n    };\n\n    Node* root;\n\n    Node* getNode() {\n        Node* n = new Node();\n        \n        for (int i = 0; i < 26; i++) {\n            n->child[i] = NULL;\n        }\n\n        return n;\n    }\n\n    Trie() {\n        this->root = getNode();\n    };\n    \n    void insert(string word) {\n        \n        Node* it = this->root;\n\n        for (int i = 0; i < word.size(); i++) {\n            int index = word[i] - 'a';\n            if (!it->child[index]) it->child[index] = getNode();\n            it = it->child[index];\n        }\n        \n        it->isend = true;\n    }\n    \n    bool search(string word) {\n        Node* it = this->root;\n\n        for (int i = 0; i < word.size(); i++) {\n            int index = word[i] - 'a';\n            if (!it->child[index]) return false;\n            it = it->child[index];\n        }\n\n        return it->isend;\n    }\n    \n    bool startsWith(string prefix) {\n        Node* it = this->root;\n\n        for (int i = 0; i < prefix.size(); i++) {\n            int index = prefix[i] - 'a';\n            if (!it->child[index]) return false;\n            it = it->child[index];\n        }\n\n        return true;\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}