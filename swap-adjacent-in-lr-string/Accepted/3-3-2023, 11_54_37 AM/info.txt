{"id":908381746,"lang":"cpp","lang_name":"C++","time":"6 months, 1 week","timestamp":1677855277,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/908381746/","is_pending":"Not Pending","title":"Swap Adjacent in LR String","memory":"9 MB","code":"using namespace std;\nclass Solution {\npublic:\n    bool canTransform(string start, string end) {\n        string s = start, t = end;\n\n        s.erase(remove(s.begin(), s.end(), 'X'), s.end());\n        t.erase(remove(t.begin(), t.end(), 'X'), t.end());\n\n        vector<int> Lst, Len;\n        vector<int> Rst, Ren;\n\n        if (s != t)\n            return false;\n\n        int n = start.size();\n\n        for (int i = 0; i < n; i++) {\n            if (start[i] == 'L') Lst.push_back(i);\n            else if (start[i] == 'R') Rst.push_back(i);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (end[i] == 'L') Len.push_back(i);\n            else if (end[i] == 'R') Ren.push_back(i);\n        }\n\n        for (int i = 0; i < Lst.size(); i++) {\n            if (Lst[i] < Len[i]) return false;\n        }\n\n        for (int i = 0; i < Rst.size(); i++) {\n            if (Rst[i] > Ren[i]) return false;\n        }\n\n        return true;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"swap-adjacent-in-lr-string","has_notes":false,"flag_type":1}