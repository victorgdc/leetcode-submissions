{"id":999710144,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1689889175,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/999710144/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"13.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>> ans;\n        queue<TreeNode*> q;\n        \n        if (root == NULL) return ans;\n\n        q.push(root);\n\n        vector<int> partial;\n        \n        while(!q.empty()) {\n            int size = q.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode* tmp = q.front(); q.pop();\n\n                if (tmp->left != NULL) q.push(tmp->left);\n                if (tmp->right != NULL) q.push(tmp->right);\n\n                partial.push_back(tmp->val);\n            }    \n            ans.push_back(partial);\n            partial.clear();\n        }\n\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}