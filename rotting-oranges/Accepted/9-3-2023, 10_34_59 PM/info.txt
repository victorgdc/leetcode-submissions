{"id":1039880452,"lang":"cpp","lang_name":"C++","time":"1Â week","timestamp":1693791299,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1039880452/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"13 MB","code":"class Solution {\npublic:\n    \n    int DIR[5] = {0, -1, 0, 1, 0};\n    int orangesRotting(vector<vector<int>>& grid) {\n        int nfresh = 0;\n        int n = grid.size();\n        int m = grid[0].size();\n        queue<pair<int, int>> q;\n        int ans = -1;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                int orange = grid[i][j];\n                if (orange == 2) {\n                    q.push({i, j});\n                }\n                else if (orange == 1) nfresh++;\n            }\n        }\n\n        if (nfresh == 0) return 0;\n\n        while (!q.empty()) {\n            int s = q.size();\n            while (s--) {\n                auto [x, y] = q.front(); q.pop();\n                for (int i = 0; i < 4; i++) {\n                    int cx = x + DIR[i];\n                    int cy = y + DIR[i+1];\n\n                    if (cx >= 0 && cx < n && cy >= 0 && cy < m && grid[cx][cy] == 1) {\n                        nfresh--;\n                        grid[cx][cy] = 2;\n                        q.push({cx, cy});\n                    }\n                }\n            }\n            ans++;\n        }\n\n        return nfresh > 0 ? -1 : ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges","has_notes":false,"flag_type":1}