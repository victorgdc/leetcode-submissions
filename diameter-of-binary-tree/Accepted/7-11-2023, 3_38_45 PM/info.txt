{"id":992082689,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1689100725,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/992082689/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"20.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        int max_depth = 0;\n        int d = depth(max_depth, root);\n        return max_depth;\n    }\n    int depth (int& max_depth, TreeNode* root) {\n\n        if (root == NULL) return 0;\n\n        int left = depth(max_depth, root->left);\n        int right = depth(max_depth, root->right);\n\n        max_depth = max(max_depth, left+right);\n\n        return 1 + max(left, right);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree","has_notes":false,"flag_type":1}